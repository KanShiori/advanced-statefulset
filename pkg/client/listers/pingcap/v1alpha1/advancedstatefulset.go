/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cofyc/advanced-statefulset/pkg/apis/pingcap/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AdvancedStatefulSetLister helps list AdvancedStatefulSets.
type AdvancedStatefulSetLister interface {
	// List lists all AdvancedStatefulSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AdvancedStatefulSet, err error)
	// AdvancedStatefulSets returns an object that can list and get AdvancedStatefulSets.
	AdvancedStatefulSets(namespace string) AdvancedStatefulSetNamespaceLister
	AdvancedStatefulSetListerExpansion
}

// advancedStatefulSetLister implements the AdvancedStatefulSetLister interface.
type advancedStatefulSetLister struct {
	indexer cache.Indexer
}

// NewAdvancedStatefulSetLister returns a new AdvancedStatefulSetLister.
func NewAdvancedStatefulSetLister(indexer cache.Indexer) AdvancedStatefulSetLister {
	return &advancedStatefulSetLister{indexer: indexer}
}

// List lists all AdvancedStatefulSets in the indexer.
func (s *advancedStatefulSetLister) List(selector labels.Selector) (ret []*v1alpha1.AdvancedStatefulSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdvancedStatefulSet))
	})
	return ret, err
}

// AdvancedStatefulSets returns an object that can list and get AdvancedStatefulSets.
func (s *advancedStatefulSetLister) AdvancedStatefulSets(namespace string) AdvancedStatefulSetNamespaceLister {
	return advancedStatefulSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdvancedStatefulSetNamespaceLister helps list and get AdvancedStatefulSets.
type AdvancedStatefulSetNamespaceLister interface {
	// List lists all AdvancedStatefulSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AdvancedStatefulSet, err error)
	// Get retrieves the AdvancedStatefulSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AdvancedStatefulSet, error)
	AdvancedStatefulSetNamespaceListerExpansion
}

// advancedStatefulSetNamespaceLister implements the AdvancedStatefulSetNamespaceLister
// interface.
type advancedStatefulSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AdvancedStatefulSets in the indexer for a given namespace.
func (s advancedStatefulSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AdvancedStatefulSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdvancedStatefulSet))
	})
	return ret, err
}

// Get retrieves the AdvancedStatefulSet from the indexer for a given namespace and name.
func (s advancedStatefulSetNamespaceLister) Get(name string) (*v1alpha1.AdvancedStatefulSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("advancedstatefulset"), name)
	}
	return obj.(*v1alpha1.AdvancedStatefulSet), nil
}
